knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
data_sim <- function(seed, nobs, beta, sigma, xmeans, xsigs){
set.seed(seed)
xrn <- rmvnorm(nobs, mean = xmeans, sigma = xsigs)
xped <- cbind(rep(1,nobs),xrn)
y <- xped %*% beta + rnorm(nobs ,0, sigma)
df <- data.frame(x=xrn, y=y)
return(df)
}
parallel_lm <- function(data){
lm_res <- lm(y ~ x.1 + x.2 + x.3, data = data)
return(list(coef=coef(lm_res), lm_results=lm_res))
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
data_sim <- function(seed, nobs, beta, sigma, xmeans, xsigs){
set.seed(seed)
xrn <- rmvnorm(nobs, mean = xmeans, sigma = xsigs)
xped <- cbind(rep(1,nobs),xrn)
y <- xped %*% beta + rnorm(nobs ,0, sigma)
df <- data.frame(x=xrn, y=y)
return(df)
}
parallel_lm <- function(data){
lm_res <- lm(y ~ x.1 + x.2 + x.3, data = data)
return(list(coef=coef(lm_res), lm_results=lm_res))
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
data_sim <- function(seed, nobs, beta, sigma, xmeans, xsigs){
set.seed(seed)
xrn <- rmvnorm(nobs, mean = xmeans, sigma = xsigs)
xped <- cbind(rep(1,nobs),xrn)
y <- xped %*% beta + rnorm(nobs ,0, sigma)
df <- data.frame(x=xrn, y=y)
return(df)
}
parallel_lm <- function(data){
lm_res <- lm(y ~ x.1 + x.2 + x.3, data = data)
return(list(coef=coef(lm_res), lm_results=lm_res))
}
distill::create_theme(name = "theme")
distill::create_theme(name = "theme")
rmarkdown::render_site(encoding = 'UTF-8')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
library(parallel)
library(mvtnorm)
N <- 10000
nobs <- 200
beta <- c(5, 4, -5, -3)
xmeans <- c(-2, 0, 2)
xsigs <-diag(rep(1, 3))
sig <- 3
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
data_sim <- function(seed, nobs, beta, sigma, xmeans, xsigs){
set.seed(seed)
xrn <- rmvnorm(nobs, mean = xmeans, sigma = xsigs)
xped <- cbind(rep(1,nobs),xrn)
y <- xped %*% beta + rnorm(nobs ,0, sigma)
df <- data.frame(x=xrn, y=y)
return(df)
}
start <- Sys.time()
parallel_data <- lapply(c(1:N), data_sim,
nobs = nobs, beta = beta, sigma = sig, xmeans = xmeans, xsigs = xsigs)
Sys.time()-start
detectCores()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
data_sim <- function(seed, nobs, beta, sigma, xmeans, xsigs){
set.seed(seed)
xrn <- rmvnorm(nobs, mean = xmeans, sigma = xsigs)
xped <- cbind(rep(1,nobs),xrn)
y <- xped %*% beta + rnorm(nobs ,0, sigma)
df <- data.frame(x=xrn, y=y)
return(df)
}
parallel_lm <- function(data){
lm_res <- lm(y ~ x.1 + x.2 + x.3, data = data)
return(coef(lm_res))
}
library(parallel)
library(mvtnorm)
N <- 10000
nobs <- 200
beta <- c(5, 4, -5, -3)
xmeans <- c(-2, 0, 2)
xsigs <-diag(rep(1, 3))
sig <- 3
start <- Sys.time()
parallel_data <- lapply(c(1:N), data_sim,
nobs = nobs, beta = beta, sigma = sig, xmeans = xmeans, xsigs = xsigs)
Sys.time()-start
detectCores()
ncores <- 8
start <- Sys.time()
lapply_results <- lapply(parallel_data, parallel_lm)
(lapply_time <- Sys.time()-start)
start <- Sys.time()
mclapply_results <- mclapply(parallel_data, parallel_lm, mc.cores = ncores)
(mclapply_time <- Sys.time()-start)
start <- Sys.time()
cl <- makeCluster(ncores)
clusterExport(cl, c("parallel_lm"))
parLapply_results<-parLapply(cl,parallel_data,parallel_lm)
stopCluster(cl)
(parLapply_time <- Sys.time()-start)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
data_sim <- function(seed, nobs, beta, sigma, xmeans, xsigs){
set.seed(seed)
xrn <- rmvnorm(nobs, mean = xmeans, sigma = xsigs)
xped <- cbind(rep(1,nobs),xrn)
y <- xped %*% beta + rnorm(nobs ,0, sigma)
df <- data.frame(x=xrn, y=y)
return(df)
}
parallel_lm <- function(data){
lm_res <- lm(y ~ x.1 + x.2 + x.3, data = data)
return(coef(lm_res))
}
library(parallel)
library(mvtnorm)
N <- 10000
nobs <- 200
beta <- c(5, 4, -5, -3)
xmeans <- c(-2, 0, 2)
xsigs <-diag(rep(1, 3))
sig <- 3
start <- Sys.time()
parallel_data <- lapply(c(1:N), data_sim,
nobs = nobs, beta = beta, sigma = sig, xmeans = xmeans, xsigs = xsigs)
Sys.time()-start
detectCores()
ncores <- 8
start <- Sys.time()
lapply_results <- lapply(parallel_data, parallel_lm)
(lapply_time <- Sys.time()-start)
start <- Sys.time()
mclapply_results <- mclapply(parallel_data, parallel_lm, mc.cores = ncores)
(mclapply_time <- Sys.time()-start)
start <- Sys.time()
cl <- makeCluster(ncores)
clusterExport(cl, c("parallel_lm"))
parLapply_results<-parLapply(cl,parallel_data,parallel_lm)
stopCluster(cl)
(parLapply_time <- Sys.time()-start)
colMeans()
lapply_mat <- matrix(unlist(lapply_results), ncol = 4)
lapply_mat
colMeans(lapply_mat)
lapply_mat <- matrix(unlist(lapply_results), nrow = 4)
colMeans(lapply_mat)
rowMeans(lapply_mat)
rowMeans(lapply_mat)
rowMeans(mclapply_mat)
lapply_mat <- matrix(unlist(lapply_results), nrow = 4)
mclapply_mat <- matrix(unlist(mclapply_results), nrow = 4)
parLapply_mat <- matrix(unlist(parLapply_results), nrow = 4)
rowMeans(lapply_mat)
rowMeans(mclapply_mat)
rowMeans(parLapply_mat)
## Loading R Packages ####
library(batchtools)
library(RenvModule)
library(mvtnorm)
## Functions ####
data_set_sim <- function(seed, nobs, beta, sigma, xmeans, xsigs){ # Simulates the data set
set.seed(seed) # Sets a seed
xrn <- rmvnorm(nobs, mean = xmeans, sigma = xsigs) # Simulates Predictors
xped <- cbind(rep(1,nobs),xrn) # Creating Design Matrix
y <- xped %*% beta + rnorm(nobs ,0, sigma) # Simulating Y
df <- data.frame(x=xrn, y=y) # Creating Data Frame
return(df)
}
data_sim <- function(data){ # Simulates the data set
df_list <- lapply(1:data$N, data_set_sim,
nobs = data$nobs, beta = data$beta, sigma = data$sigma,
xmeans = data$xmeans, xsigs = data$xsigs)
return(list(df_list = df_list, formula = data$formula))
}
lm_coef <- function(formula, data){ # Applying a Ordinary Least Squares to a data frame and formula
lm_res <- lm(formula, data = data) # Find OLS Estimates
return(as.vector(coef(lm_res)))# Obtaining
}
## Parallel Parameters ####
ncores <- 8 # Number of cpus to be used
## Simulation Parameters ####
sim_list <- list(list(N = 1000, # Number of Data sets
nobs = 200, # Number of observations
beta = c(20, 30), # beta parameters
xmeans = c(0, 2), # Means for predictors
xsigs = diag(rep(1, 1)), # Variance for predictor
sig = 3, # Variance for error term
formula = y ~ x.1),
list(N = 1000, # Number of Data sets
nobs = 200, # Number of observations
beta = c(5, -8, 2), # beta parameters
xmeans = c(-2, 0), # Means for predictors
xsigs = diag(rep(1, 2)), # Variance for predictor
sig = 3, # Variance for error term
formula = y ~ x.1 + x.2),
list(N = 1000, # Number of Data sets
nobs = 200, # Number of observations
beta = c(5, 4, -5, -3), # beta parameters
xmeans = c(-2, 0, 2), # Means for predictors
xsigs = diag(rep(1, 3)), # Variance for predictor
sig = 3, # Variance for error term
formula = y ~ x.1 + x.2 + x.3),
list(N = 1000, # Number of Data sets
nobs = 200, # Number of observations
beta = c(5, 4, -5, -3, 6), # beta parameters
xmeans = c(-2, 0, 2, 8), # Means for predictors
xsigs = diag(rep(1, 4)), # Variance for predictor
sig = 3, # Variance for error term
formula = y ~ x.1 + x.2 + x.3 + x.5)
)
standard_data <- lapply(sim_list, data_sim) # Using data_sim function to simulate N data sets
## Simulation Parameters ####
sim_list <- list(list(N = 1000, # Number of Data sets
nobs = 200, # Number of observations
beta = c(20, 30), # beta parameters
xmeans = c(0), # Means for predictors
xsigs = diag(rep(1, 1)), # Variance for predictor
sig = 3, # Variance for error term
formula = y ~ x.1),
list(N = 1000, # Number of Data sets
nobs = 200, # Number of observations
beta = c(5, -8, 2), # beta parameters
xmeans = c(-2, 0), # Means for predictors
xsigs = diag(rep(1, 2)), # Variance for predictor
sig = 3, # Variance for error term
formula = y ~ x.1 + x.2),
list(N = 1000, # Number of Data sets
nobs = 200, # Number of observations
beta = c(5, 4, -5, -3), # beta parameters
xmeans = c(-2, 0, 2), # Means for predictors
xsigs = diag(rep(1, 3)), # Variance for predictor
sig = 3, # Variance for error term
formula = y ~ x.1 + x.2 + x.3),
list(N = 1000, # Number of Data sets
nobs = 200, # Number of observations
beta = c(5, 4, -5, -3, 6), # beta parameters
xmeans = c(-2, 0, 2, 8), # Means for predictors
xsigs = diag(rep(1, 4)), # Variance for predictor
sig = 3, # Variance for error term
formula = y ~ x.1 + x.2 + x.3 + x.5)
)
standard_data <- lapply(sim_list, data_sim) # Using data_sim function to simulate N data sets
## Simulation Parameters ####
sim_list <- list(list(N = 1000, # Number of Data sets
nobs = 200, # Number of observations
beta = c(20, 30), # beta parameters
xmeans = c(0), # Means for predictors
xsigs = diag(rep(1, 1)), # Variance for predictor
sigma = 3, # Variance for error term
formula = y ~ x.1),
list(N = 1000, # Number of Data sets
nobs = 200, # Number of observations
beta = c(5, -8, 2), # beta parameters
xmeans = c(-2, 0), # Means for predictors
xsigs = diag(rep(1, 2)), # Variance for predictor
sigma = 3, # Variance for error term
formula = y ~ x.1 + x.2),
list(N = 1000, # Number of Data sets
nobs = 200, # Number of observations
beta = c(5, 4, -5, -3), # beta parameters
xmeans = c(-2, 0, 2), # Means for predictors
xsigs = diag(rep(1, 3)), # Variance for predictor
sigma = 3, # Variance for error term
formula = y ~ x.1 + x.2 + x.3),
list(N = 1000, # Number of Data sets
nobs = 200, # Number of observations
beta = c(5, 4, -5, -3, 6), # beta parameters
xmeans = c(-2, 0, 2, 8), # Means for predictors
xsigs = diag(rep(1, 4)), # Variance for predictor
sigma = 3, # Variance for error term
formula = y ~ x.1 + x.2 + x.3 + x.5)
)
standard_data <- lapply(sim_list, data_sim) # Using data_sim function to simulate N data sets
standard_data[[2]]
parallel_lm(data){
ll<-length(data$df_list)
results <- mclapply(data$df_list, lm_coef, formula = data$formula,
mc.cores = 8)
mat<-matrix(unlist(results), nrow = ll, byrow = T)
}
parallel_lm(data){
ll<-length(data$df_list)
results <- mclapply(data$df_list, lm_coef, formula = data$formula,
mc.cores = 8)
mat<-matrix(unlist(results), nrow = ll, byrow = T)
return(mat)
}
parallel_lm<-function(data){
ll<-length(data$df_list)
results <- parallel::mclapply(data$df_list, lm_coef, formula = data$formula,
mc.cores = 8)
mat<-matrix(unlist(results), nrow = ll, byrow = T)
return(mat)
}
parallel_lm(standard_data[[1]])
standard_data[[1]]$df_list[[1]]
## Simulation Parameters ####
sim_list <- list(list(N = 500, # Number of Data sets
nobs = 200, # Number of observations
beta = c(20, 30), # beta parameters
xmeans = c(0), # Means for predictors
xsigs = diag(rep(1, 1)), # Variance for predictor
sigma = 3, # Variance for error term
formula = y ~ x),
list(N = 5000, # Number of Data sets
nobs = 200, # Number of observations
beta = c(5, -8, 2), # beta parameters
xmeans = c(-2, 0), # Means for predictors
xsigs = diag(rep(1, 2)), # Variance for predictor
sigma = 3, # Variance for error term
formula = y ~ x.1 + x.2),
list(N = 500, # Number of Data sets
nobs = 200, # Number of observations
beta = c(5, 4, -5, -3), # beta parameters
xmeans = c(-2, 0, 2), # Means for predictors
xsigs = diag(rep(1, 3)), # Variance for predictor
sigma = 3, # Variance for error term
formula = y ~ x.1 + x.2 + x.3),
list(N = 500, # Number of Data sets
nobs = 200, # Number of observations
beta = c(5, 4, -5, -3, 6), # beta parameters
xmeans = c(-2, 0, 2, 8), # Means for predictors
xsigs = diag(rep(1, 4)), # Variance for predictor
sigma = 3, # Variance for error term
formula = y ~ x.1 + x.2 + x.3 + x.5)
)
standard_data <- lapply(sim_list, data_sim) # Using data_sim function to simulate N data sets
parallel_lm(standard_data[[1]])
colMeans(parallel_lm(standard_data[[1]]))
